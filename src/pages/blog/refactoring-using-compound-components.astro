---
import {
  CleanComponent,
  CleanComponentUsed,
  CleanContext,
  MessyComponent,
  MessyComponentInvoked,
} from "~components/blog/ReactCode";
import SampleForm from "~components/blog/SampleForm.astro";
import Layout from "~layouts/Layout.astro";
---

<Layout>
  <main class="grid place-items-center pt-3xl pb-3xl">
    <div class="prose">
      <header>
        <h1 class="">Refactoring using compound components in React</h1>
      </header>
      <div>
        <p>
          Consider the following case: an abstract component of a relatively
          simple form with a single text input that is validated.
        </p>
        <p>
          A form such as this can quickly become messy and complex if props and
          UI are all dumped into one component.
        </p>
        <div class="p-lg shadow-xl rounded-md">
          <SampleForm />
        </div>
      </div>
      <div class="mt-xl">
        <h4>The default way</h4>
        <div>
          <p>
            Building up an abstract component from 0 and adding more features we
            can get something like the below. Yes, this is a mess, but please
            bare with me.
          </p>
          <p class="italic text-gray-500">
            Note:
            <ul class="italic text-gray-500">
              <li>
                There's additional styling I've kept in to give a sense of the
                real need for refactoring.
              </li>
              <li>
                I haven't explained what each part does but hopefully it's
                implicit.
              </li>
              <li>I'm using Typescript and tailwind.</li>
            </ul>
          </p>
          <MessyComponent client:only="react" />
          <p>
            The above code certainly needs to be cleaned up and refactored, with
            or without compound components. It contains at least one bug.
          </p>
          <p>
            When the component is actually used, even with some placeholder
            arguments, it gets no better:
          </p>
          <MessyComponentInvoked client:only="react" />
          <p>
            If I were to use this component as is, I feel like I pass in the
            values and do a hail-mary.
          </p>
        </div>
      </div>
      <div class="mt-xl">
        <h4>Refactoring into a compound component</h4>
        <p>
          I'll break this up into a compound component. Compound components
          often work well with Context, so that's what I'll use here.
        </p>
        <CleanContext client:only="react" />
        <CleanComponent client:only="react" />
        <p>More lines, yes, but it comes into its own when using it.</p>
        <CleanComponentUsed client:only="react" />
        <p>
          <ul class="text-gray-500 italic">
            <li>
              Note: this isn't quite a step-by-step guide but more of a showcase
              of compound components. The reasoning for each part of the
              refactor should be derivable by intermediate developers.
            </li>
            <li>
              The only difference between a compound component and the same
              component (as it is - broken up into chunks), is the '.' naming.
            </li>
          </ul>
        </p>
        <p>
          When used, the worth of the abstraction and the naming that comes with
          compound components becomes clear.
          <ul>
            <li>
              It's clear what each prop does without having to read the
              component's code.
            </li>
            <li>
              I can now add extra components, such as YoutubeURLHelp, without
              adding another prop.
            </li>
            <li>
              I can make the form's value available to all children, without
              having to pass it into each prop.
            </li>
            <li>
              I can choose which part of the component to use without adding
              more props and conditional rendering.
            </li>
          </ul>
        </p>
      </div>
      <div>
        <h4>Conclusion</h4>
        <p>
          This was a great use case for abstraction and compound components.
          However, abstraction, and particularly compound components, do make
          our code bulkier and shouldn't be used unless complexity demands it.
        </p>
      </div>
    </div>
  </main>
</Layout>
