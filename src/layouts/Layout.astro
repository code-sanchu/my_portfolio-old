---
import "../styles/global.css";

import Navigation from "../components/Navigation.astro";

type FontName =
  | "display-primary"
  | "body-primary"
  | "asatic-r"
  | "alesh"
  | "birch-b"
  | "piros";

const fontMap = {
  ["display-primary"]: {
    href: "/fonts/TiltNeon-Regular.ttf",
    type: "font/ttf",
  },
  ["body-primary"]: {
    // href: "/fonts/WS_r.ttf",
    href: "/fonts/TiltNeon-Regular.ttf",
    type: "font/ttf",
  },
  ["asatic-r"]: {
    href: "/fonts/NM_R.woff2",
    type: "font/woff2",
  },
  ["birch-b"]: {
    href: "/fonts/AM-b.ttf",
    type: "font/woff2",
  },
  ["alesh"]: {
    href: "/fonts/IBMMono.woff2",
    type: "font/woff2",
  },
};

export interface Props {
  preloadFonts?: FontName[];
}

declare global {
  interface Window {
    awaitingPageChange: boolean;
    isMousedOverProjects: boolean;
  }
}

const { preloadFonts } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.ico" />
    <meta name="generator" content={Astro.generator} />
    <title>VirtualWorks. Custom Sites.</title>
    {
      preloadFonts?.map((fontName) =>
        fontName === "piros" ? (
          <link
            rel="preload stylesheet"
            as="style"
            href="https://use.typekit.net/ewe1rrd.css"
          />
        ) : (
          <link
            rel="preload"
            href={fontMap[fontName].href}
            as="font"
            type={fontMap[fontName].type}
            crossorigin
          />
        )
      )
    }
  </head>
  <body id="body" class="w-screen overflow-x-hidden">
    <Navigation />
    <div class="w-full min-h-screen" id="content-container">
      <slot />
    </div>
  </body>
</html>

<script>
  import anime from "animejs";
  import { projectIdString } from "~data/idString";

  function handlePageChangeOnMouseWheel() {
    const body = document.getElementById("body")!;

    body.addEventListener(
      "wheel",
      (event) => {
        if (window.awaitingPageChange === true) {
          return;
        }
        const currentLocation = window.location.pathname;

        const isWorkPage =
          currentLocation === "/work" || currentLocation === "/work/";
        const isServicesPage =
          currentLocation === "/services" || currentLocation === "/services/";

        const isNextPage = currentLocation === "/" || isWorkPage;
        const isPrevPage = isWorkPage || isServicesPage;

        if (!isNextPage && !isPrevPage) {
          return;
        }

        if (window.isMousedOverProjects === true) {
          return;
        }

        const direction = event.deltaY < 0 ? "up" : "down";

        if (isNextPage && direction === "down") {
          window.awaitingPageChange = true;

          const nextPageRoute = currentLocation === "/" ? "/work" : "/services";

          fadePageOut();

          setTimeout(() => {
            window.awaitingPageChange = false;
            window.location.href = nextPageRoute;
          }, 450);
        }
        if (isPrevPage && direction === "up") {
          window.awaitingPageChange = true;

          const nextPageRoute = isWorkPage ? "/" : "/work";

          fadePageOut();

          setTimeout(() => {
            window.awaitingPageChange = false;
            window.location.href = nextPageRoute;
          }, 450);
        }
      },
      { passive: true }
    );
  }

  function fadePageOut() {
    anime({
      targets: "#content-container",
      opacity: 0,
      easing: "easeOutCubic",
      duration: 400,
    });
  }

  function trackProjectsContainerIsMousedOverOnWorkPage() {
    const currentLocation = window.location.pathname;

    const isWorkPage =
      currentLocation === "/work" || currentLocation === "/work/";

    if (!isWorkPage) {
      return;
    }

    const projectsContainer = document.getElementById(
      projectIdString.projectsContainer
    )!;

    projectsContainer.addEventListener(
      "mouseover",
      () => {
        window.isMousedOverProjects = true;
      },
      { passive: true }
    );
    projectsContainer.addEventListener(
      "mouseleave",
      () => {
        window.isMousedOverProjects = false;
      },
      { passive: true }
    );
  }

  const main = () => {
    trackProjectsContainerIsMousedOverOnWorkPage();
    handlePageChangeOnMouseWheel();
  };

  main();
</script>
