---
import { Image } from "@astrojs/image/components";

import { projectIdString } from "~data/idString";

import { projects } from "./data";
---

<div class="pl-[30px] sm:pl-0 w-[84vw] sm:w-[80vw] max-w-[1200px]">
  <div
    class="flex justify-between items-center"
    id={projectIdString.projectContainer}
    data-num-projects={projects.length}
  >
    <div>
      {
        projects.map((project, i) => (
          <>
            <div class="sm:hidden border-2">
              <div class="font-body-primary">
                <p
                  id={`${projectIdString.projectType}${i}`}
                  class={`flex items-center gap-sm opacity-0`}
                >
                  <span>{project.description.siteType}</span>
                  <span class="w-[18px] h-[1px] block bg-black" />
                </p>
                <p
                  id={`${projectIdString.projectAbout}${i}`}
                  class=" text-gray-600 opacity-0"
                >
                  {project.description.siteAbout}
                </p>
              </div>
            </div>
            <div
              id={`${projectIdString.project}${i}`}
              class={`hidden sm:flex overflow-hidden pt-xl  ${
                i === 0 ? "" : "hidden"
              }`}
            >
              <div class="relative w-[245px] h-[350px] xl:w-[350px] xl:h-[500px] translate-y-full">
                <Image
                  id={`${projectIdString.projectImage}${i}`}
                  src={project.image}
                  alt=""
                  format="avif"
                  class="w-full h-full object-cover"
                />
              </div>
              <div class="flex flex-col justify-end ">
                <div class="mb-[40px] xl:mb-[90px] ml-xl">
                  <div class="font-body-primary">
                    <p
                      id={`${projectIdString.projectType}${i}`}
                      class={`flex items-center gap-sm opacity-0`}
                    >
                      <span>{project.description.siteType}</span>
                      <span class="w-[18px] h-[1px] block bg-black" />
                    </p>
                    <p
                      id={`${projectIdString.projectAbout}${i}`}
                      class=" text-gray-600 opacity-0"
                    >
                      {project.description.siteAbout}
                    </p>
                  </div>
                </div>
                <div class="-translate-x-[60px]">
                  <div class="translate-y-20px">
                    {project.title.type === "text" ? (
                      <h2
                        id={`${projectIdString.projectTitle}${i}`}
                        class={`text-6xl xl:text-7xl bg-work-title bg-clip-text text-transparent mb-1.5xl xl:mb-3xl opacity-0 flex flex-col ${
                          project.id === "asatic"
                            ? "font-asatic-r"
                            : project.id === "alesh"
                            ? "font-alesh tracking-wide"
                            : project.id === "birch"
                            ? "font-birch-b"
                            : project.id === "piros"
                            ? "font-piros"
                            : ""
                        }`}
                      >
                        {typeof project.title.text === "string"
                          ? project.title.text
                          : project.title.text.map((line) => (
                              <span class="">{line}</span>
                            ))}
                      </h2>
                    ) : (
                      <div
                        id={`${projectIdString.projectTitle}${i}`}
                        class="w-[350px] mb-1.5xl xl:mb-3xl opacity-0"
                      >
                        <Image src={project.title.url} alt="" format="avif" />
                      </div>
                    )}
                  </div>
                </div>
                <p
                  id={`${projectIdString.projectLink}${i}`}
                  class={`pl-2xl opacity-0 font-body-primary`}
                >
                  <a
                    href={project.link.url}
                    target={
                      project.link.type === "external" ? "_blank" : "_self"
                    }
                  >
                    {project.link.text}
                  </a>
                </p>
              </div>
            </div>
          </>
        ))
      }
    </div>
    <div
      class="hidden md:flex flex-col items-center gap-sm text-gray-800 text-sm"
    >
      <div>
        0<span class="inline-block" id={projectIdString.projectPaginationNum}
          >1</span
        >.
      </div>
      <div class="relative h-[200px] w-[1.5px] bg-gray-300">
        <div
          id={projectIdString.projectPaginationLine}
          class="h-[40px] w-[1.5px] bg-gray-800 absolute"
        >
        </div>
      </div>
      <div>05.</div>
    </div>
  </div>
  <div class="flex justify-between px-md font-display-primary mt-md">
    <button id={projectIdString.projectPrev} type="button">&lt;</button>
    <button id={projectIdString.projectNext} type="button">&gt;</button>
  </div>
</div>

<script>
  import anime from "animejs/lib/anime.es";

  import { projectIdString } from "~data/idString";
  import { calcNextIndex, calcPrevIndex } from "~helpers/index";

  function animateProjectIn({ index }: { index: number }) {
    const type = anime.timeline({
      targets: `#${projectIdString.projectType}${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    type.add({
      translateY: "-20px",
      opacity: 1,
    });

    const about = anime.timeline({
      targets: `#${projectIdString.projectAbout}${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    about.add({
      delay: 50,
      translateY: "-20px",
      opacity: 1,
    });

    const title = anime.timeline({
      delay: 200,
      targets: `#${projectIdString.projectTitle}${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    title.add({
      translateY: "-20px",
      opacity: 1,
    });

    const link = anime.timeline({
      targets: `#${projectIdString.projectLink}${index}`,
      delay: 200,
      easing: "spring(6, 70, 80, 4)",
    });
    link.add({
      // translateY: "-100%",
      opacity: 1,
    });

    const image = anime.timeline({
      targets: `#${projectIdString.projectImage}${index}`,
      easing: "spring(6, 70, 80, 3)",
    });
    image.add({
      delay: 200,
      translateY: "-100%",
      opacity: 1,
    });
  }

  function animateProjectElementsOut({ index }: { index: number }) {
    const type = anime.timeline({
      targets: `#${projectIdString.projectType}${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    type.add({
      translateY: -40,
      opacity: 0,
    });
    type.add({
      translateY: "0%",
    });

    const about = anime.timeline({
      targets: `#${projectIdString.projectAbout}${index}`,
      easing: "spring(6, 70, 80, 4)",
      delay: 50,
    });
    about.add({
      translateY: -40,
      opacity: 0,
    });
    about.add({
      translateY: "0%",
    });

    const title = anime.timeline({
      delay: 200,
      targets: `#${projectIdString.projectTitle}${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    title.add({
      translateY: "-40px",
      opacity: 0,
    });
    title.add({
      translateY: 0,
    });

    const link = anime.timeline({
      targets: `#${projectIdString.projectLink}${index}`,
      delay: 200,
      easing: "spring(6, 70, 80, 4)",
    });
    link.add({
      opacity: 0,
    });

    const currentImage = anime.timeline({
      delay: 200,
      targets: `#${projectIdString.projectImage}${index}`,
      easing: "spring(6, 70, 80, 3)",
    });
    currentImage.add({
      translateY: "-200%",
      opacity: 0,
    });
    currentImage.add({
      translateY: "0%",
    });
  }

  function animatePagination({
    currentIndex,
    nextIndex,
    maxIndex,
  }: {
    currentIndex: number;
    nextIndex: number;
    maxIndex: number;
  }) {
    anime({
      targets: `#${projectIdString.projectPaginationNum}`,
      innerText: [currentIndex + 1, nextIndex + 1],
      round: 1,
      easing: "easeInOutExpo",
    });

    anime({
      targets: `#${projectIdString.projectPaginationLine}`,
      height: (200 / (maxIndex + 1)) * (nextIndex + 1),
      easing: "easeInOutExpo",
    });
  }

  function handleProjectContainerDisplay({
    currentIndex,
    nextIndex,
  }: {
    currentIndex: number;
    nextIndex: number;
  }) {
    const currentProjectId = `${projectIdString.project}${currentIndex}`;
    const nextProjectId = `${projectIdString.project}${nextIndex}`;
    const currentProject = document.getElementById(currentProjectId)!;
    currentProject.style.display = "none";
    const nextProject = document.getElementById(nextProjectId)!;
    nextProject.style.display = "flex";
  }

  function getMaxIndex() {
    const projectsContainer = document.getElementById(
      projectIdString.projectContainer
    )!;
    const maxIndex = Number(projectsContainer.dataset.numProjects) - 1;

    return maxIndex;
  }

  function main() {
    animateProjectIn({ index: 0 });

    const maxIndex = getMaxIndex();

    let currentIndex = 0;
    let nextIndex = 1;
    let prevIndex = maxIndex;

    function updateIndexState({ direction }: { direction: "prev" | "next" }) {
      currentIndex = direction === "prev" ? prevIndex : nextIndex;
      nextIndex = calcNextIndex({ currentIndex, maxIndex });
      prevIndex = calcPrevIndex({ currentIndex, maxIndex });
    }

    function showPrevProject() {
      animateProjectElementsOut({ index: currentIndex });

      animatePagination({
        currentIndex,
        maxIndex,
        nextIndex: prevIndex,
      });

      setTimeout(() => {
        handleProjectContainerDisplay({ currentIndex, nextIndex: prevIndex });
      }, 800);

      setTimeout(() => {
        animateProjectIn({ index: prevIndex });

        updateIndexState({ direction: "prev" });
      }, 850);
    }

    function showNextProject() {
      animateProjectElementsOut({ index: currentIndex });

      animatePagination({
        currentIndex,
        maxIndex,
        nextIndex: nextIndex,
      });

      setTimeout(() => {
        handleProjectContainerDisplay({ currentIndex, nextIndex: nextIndex });
      }, 800);

      setTimeout(() => {
        animateProjectIn({ index: nextIndex });

        updateIndexState({ direction: "next" });
      }, 850);
    }

    const prevButton = document.getElementById(projectIdString.projectPrev)!;
    const nextButton = document.getElementById(projectIdString.projectNext)!;

    prevButton.addEventListener("click", showPrevProject);
    nextButton.addEventListener("click", showNextProject);

    const projectsContainer = document.getElementById(
      projectIdString.projectContainer
    )!;
    projectsContainer.addEventListener("wheel", (event) => {
      const direction = event.deltaY < 0 ? "prev" : "next";

      if (direction === "prev") {
        showPrevProject();
      } else {
        showNextProject();
      }
    });
  }

  main();
</script>
