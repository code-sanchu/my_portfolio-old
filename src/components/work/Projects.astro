---
import { Image } from "@astrojs/image/components";

import asaticImage from "~images/work/slider/asatic.jpg";
import amyImage from "~images/work/slider/amy.png";
import amyLogo from "~images/work/amy/logo.png";
import aleshImage from "~images/work/slider/alesh.jpg";
import pirosImage from "~images/work/slider/piros.jpeg";
import birchImage from "~images/work/slider/birch.jpg";

const projects: {
  id: string;
  title:
    | { type: "image"; url: ImageMetadata }
    | { type: "text"; text: string | string[] };
  image: ImageMetadata;
  link: {
    text: string;
    url: string;
    type: "internal" | "external";
  };
  description: string;
}[] = [
  {
    id: "alesh",
    title: { type: "text", text: ["Alesh", "Compton"] },
    image: aleshImage,
    description: "website",
    link: {
      text: "visit site",
      url: "https://aleshcompton.com",
      type: "external",
    },
  },
  {
    id: "birch",
    title: { type: "text", text: "Birch Collective" },
    image: birchImage,
    description: "website & cms",
    link: {
      text: "visit site",
      url: "https://www.thebirchcollective.co.uk/",
      type: "external",
    },
  },
  {
    id: "asatic",
    title: { type: "text", text: "ASATiC" },
    image: asaticImage,
    description: "website & cms",
    link: {
      text: "view project",
      url: "/work/asatic",
      type: "internal",
    },
  },
  {
    id: "amy",
    title: { type: "image", url: amyLogo },
    image: amyImage,
    description: "website",
    link: {
      text: "visit site",
      url: "https://www.amyrodriguez.art/portfolio/1",
      type: "external",
    },
  },
  {
    id: "piros",
    title: { type: "text", text: ["Piros", "Photography"] },
    image: pirosImage,
    description: "website",
    link: {
      text: "visit site",
      url: "https://piros.photography",
      type: "external",
    },
  },
];
// better animations
// some more descriptive text about site: e.g.for birch, add charity; asatic, add multilingual journal
---

<div class="w-screen h-screen grid place-items-center font-display-secondary">
  <div>
    <div
      class="flex justify-between items-center w-[80vw]"
      id="projects-container"
      data-num-projects={projects.length}
    >
      {
        projects.map((project, i) => (
          <div
            id={`project${i}`}
            class={`flex overflow-hidden  ${i === 0 ? "" : "hidden"}`}
          >
            <div class="relative w-[350px] h-[500px] translate-y-full">
              <Image
                id={`image${i}`}
                src={project.image}
                alt=""
                format="avif"
              />
            </div>
            <div class="flex flex-col justify-end">
              <div class="mb-xl ml-xl">
                <div class="translate-y-full">
                  <p
                    id={`description${i}`}
                    class={`flex items-center gap-sm opacity-0 ${
                      project.id === "amy"
                        ? "font-amy"
                        : project.id === "asatic"
                        ? "font-asatic-r"
                        : project.id === "alesh"
                        ? "font-alesh"
                        : project.id === "birch"
                        ? "font-birch tracking-wide text-xl"
                        : project.id === "piros"
                        ? "font-piros"
                        : ""
                    }`}
                  >
                    <span>{project.description}</span>
                    <span class="w-[18px] h-[1px] block bg-black" />
                  </p>
                </div>
              </div>
              <div class="-translate-x-[80px]">
                <div class="translate-y-full">
                  {project.title.type === "text" ? (
                    <h2
                      id={`title${i}`}
                      class={`text-7xl bg-work-title bg-clip-text text-transparent mb-3xl opacity-0 flex flex-col ${
                        project.id === "asatic"
                          ? "font-asatic-r"
                          : project.id === "alesh"
                          ? "font-alesh tracking-wide"
                          : project.id === "birch"
                          ? "font-birch-b"
                          : project.id === "piros"
                          ? "font-piros"
                          : ""
                      }`}
                    >
                      {typeof project.title.text === "string"
                        ? project.title.text
                        : project.title.text.map((line) => (
                            <span class="">{line}</span>
                          ))}
                    </h2>
                  ) : (
                    <div id={`title${i}`} class="w-[350px] mb-3xl opacity-0">
                      <Image src={project.title.url} alt="" format="avif" />
                    </div>
                  )}
                </div>
              </div>
              <div class="translate-y-full">
                <p
                  id={`link${i}`}
                  class={`pl-2xl opacity-0 ${
                    project.id === "amy"
                      ? "font-amy"
                      : project.id === "asatic"
                      ? "font-asatic-r"
                      : project.id === "alesh"
                      ? "font-alesh"
                      : project.id === "birch"
                      ? "font-birch text-lg"
                      : project.id === "piros"
                      ? "font-piros"
                      : ""
                  }`}
                >
                  <a
                    href={project.link.url}
                    target={
                      project.link.type === "external" ? "_blank" : "_self"
                    }
                  >
                    {project.link.text}
                  </a>
                </p>
              </div>
            </div>
          </div>
        ))
      }
      <div class="flex flex-col items-center gap-sm">
        <div>
          0<span class="inline-block" id="pagination-project-num">1</span>.
        </div>
        <div class="relative h-[200px] w-[1.5px] bg-gray-300">
          <div
            id="pagination-project-line"
            class="h-[40px] w-[1.5px] bg-black absolute"
          >
          </div>
        </div>
        <div>05.</div>
      </div>
    </div>
    <div class="flex justify-between px-md font-display-primary mt-md">
      <button id="prev" type="button">&lt;</button>
      <button id="next" type="button">&gt;</button>
    </div>
  </div>
</div>

<script></script>

<script>
  import anime from "animejs/lib/anime.es";

  import { calcNextIndex, calcPrevIndex } from "~helpers/index";

  function animateProjectIn({ index }: { index: number }) {
    const description = anime.timeline({
      targets: `#description${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    description.add({
      translateY: "-100%",
      opacity: 1,
    });

    const title = anime.timeline({
      delay: 400,
      targets: `#title${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    title.add({
      translateY: "-100%",
      opacity: 1,
    });

    const link = anime.timeline({
      targets: `#link${index}`,
      delay: 400,
      easing: "spring(6, 70, 80, 4)",
    });
    link.add({
      translateY: "-100%",
      opacity: 1,
    });

    const image = anime.timeline({
      targets: `#image${index}`,
      easing: "spring(6, 70, 80, 3)",
    });
    image.add({
      delay: 400,
      translateY: "-100%",
      opacity: 1,
    });
  }

  function animateProjectElementsOut({ index }: { index: number }) {
    const description = anime.timeline({
      targets: `#description${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    description.add({
      translateY: "-200%",
      opacity: 0,
    });
    description.add({
      translateY: "0%",
    });

    const title = anime.timeline({
      delay: 200,
      targets: `#title${index}`,
      easing: "spring(6, 70, 80, 4)",
    });
    title.add({
      translateY: "-200%",
      opacity: 0,
    });
    title.add({
      translateY: "0%",
    });

    const link = anime.timeline({
      targets: `#link${index}`,
      delay: 200,
      easing: "spring(6, 70, 80, 4)",
    });
    link.add({
      translateY: "-200%",
      opacity: 0,
    });
    link.add({
      translateY: "0%",
    });

    const currentImage = anime.timeline({
      delay: 400,
      targets: `#image${index}`,
      easing: "spring(6, 70, 80, 3)",
    });
    currentImage.add({
      translateY: "-200%",
      opacity: 0,
    });
    currentImage.add({
      translateY: "0%",
    });
  }

  function animatePagination({
    currentIndex,
    nextIndex,
    maxIndex,
  }: {
    currentIndex: number;
    nextIndex: number;
    maxIndex: number;
  }) {
    anime({
      targets: "#pagination-project-num",
      innerText: [currentIndex + 1, nextIndex + 1],
      round: 1,
      easing: "easeInOutExpo",
    });

    anime({
      targets: "#pagination-project-line",
      height: (200 / (maxIndex + 1)) * (nextIndex + 1),
      easing: "easeInOutExpo",
    });
  }

  function handleProjectContainerDisplay({
    currentIndex,
    nextIndex,
  }: {
    currentIndex: number;
    nextIndex: number;
  }) {
    const currentProjectId = `project${currentIndex}`;
    const nextProjectId = `project${nextIndex}`;
    const currentProject = document.getElementById(currentProjectId)!;
    currentProject.style.display = "none";
    const nextProject = document.getElementById(nextProjectId)!;
    nextProject.style.display = "flex";
  }

  function getMaxIndex() {
    const projectsContainer = document.getElementById("projects-container")!;
    const maxIndex = Number(projectsContainer.dataset.numProjects) - 1;

    return maxIndex;
  }

  function main() {
    animateProjectIn({ index: 0 });

    const maxIndex = getMaxIndex();

    let currentIndex = 0;
    let nextIndex = 1;
    let prevIndex = maxIndex;

    function updateIndexState({ direction }: { direction: "prev" | "next" }) {
      currentIndex = direction === "prev" ? prevIndex : nextIndex;
      nextIndex = calcNextIndex({ currentIndex, maxIndex });
      prevIndex = calcPrevIndex({ currentIndex, maxIndex });
    }

    function showPrevProject() {
      animateProjectElementsOut({ index: currentIndex });

      animatePagination({
        currentIndex,
        maxIndex,
        nextIndex: prevIndex,
      });

      setTimeout(() => {
        handleProjectContainerDisplay({ currentIndex, nextIndex: prevIndex });
      }, 800);

      setTimeout(() => {
        animateProjectIn({ index: prevIndex });

        updateIndexState({ direction: "prev" });
      }, 850);
    }

    function showNextProject() {
      animateProjectElementsOut({ index: currentIndex });

      animatePagination({
        currentIndex,
        maxIndex,
        nextIndex: nextIndex,
      });

      setTimeout(() => {
        handleProjectContainerDisplay({ currentIndex, nextIndex: nextIndex });
      }, 800);

      setTimeout(() => {
        animateProjectIn({ index: nextIndex });

        updateIndexState({ direction: "next" });
      }, 850);
    }

    const prevButton = document.getElementById("prev");
    const nextButton = document.getElementById("next");

    prevButton!.addEventListener("click", showPrevProject);
    nextButton!.addEventListener("click", showNextProject);

    const projectsContainer = document.getElementById("projects-container")!;
    projectsContainer.addEventListener("wheel", (event) => {
      const direction = event.deltaY < 0 ? "prev" : "next";

      if (direction === "prev") {
        showPrevProject();
      } else {
        showNextProject();
      }
    });
  }

  main();
</script>
